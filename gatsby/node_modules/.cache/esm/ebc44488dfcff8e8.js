let path,fetch;_dfc‍.x([["sourceNodes",()=>sourceNodes],["createPages",()=>createPages]]);_dfc‍.w("path",[["default",["path"],function(v){path=v}]]);_dfc‍.w("isomorphic-fetch",[["default",["fetch"],function(v){fetch=v}]]);


async function turnPizzasIntoPages({ graphql, actions }) {
    //get template for page
    const pizzaTemplate = path.resolve('./src/templates/Pizza.js');
    //query all pizzas
    const { data } = await graphql(`
        query {
            pizzas: allSanityPizza {
                nodes {
                    name
                    slug {
                        current
                    }
                }
            }
        }
    `);

    //loop over each pizza and create page for that pizza
        data.pizzas.nodes.forEach((pizza) => {
            actions.createPage( {
                //url for new page
                path: `pizza/${pizza.slug.current}`,
                component: pizzaTemplate,
                context: {
                    slug: pizza.slug.current
                }
            });
        });
};

async function turnToppingsIntoPages({ graphql, actions }) {
    console.log(`Turning toppings into pages`)
    //get template
    const toppingTemplate = path.resolve('./src/pages/pizzas.js');
    //query all toppings
    const { data } = await graphql(`
        query {
            toppings: allSanityTopping {
                nodes {
                    name
                    id
                }
            }
        }
    `);
    //loop over data and create page for that topping
       data.toppings.nodes.forEach((topping) => {
        _dfc‍.g.console.log(`Creating page for topping`, topping.name);
        actions.createPage({
            path: `topping/${topping.name}`,
            component: toppingTemplate,
            context: {
                topping: topping.name,
                //TODO regex for topping
            }
        });
       }) 
    //pass data to pizza.js

}

async function fetchBeersAndTurnIntoNodes({ actions, createNodeId, createContentDigest}){
   //fetch list of beers
   const res = await fetch('https://sampleapis.com/beers/api/ale');
   const beers = await res.json();
   //loop over each one
   for (const beer of beers) {
       //create node for each beer
       //const nodeContent =JSON.stringify(beer);
       const nodeMeta = {
           id: createNodeId(`beer-${beer.name}`),
           parent: null,
           children: [],
           internal: {
               type: 'Beer',
               mediaType: 'application/json',
               contentDigest: createContentDigest(beer),
           }
       }
       actions.createNode({
        ...beer,
        ...nodeMeta,
    })
   } 
}

//sourcing nodes into graphql/gatsby from outside API
       async function sourceNodes(params) {
    //fetch list of beers and source them into gatsby api
    await Promise.all([
        fetchBeersAndTurnIntoNodes(params)
    ])
}

       async function createPages(params){
    //create pages dynamically
    //wait for all promises to be resolved before finishing this function
    await Promise.all([
        //pizzas
    turnPizzasIntoPages(params),
    //toppings
    turnToppingsIntoPages(params)
    ]);
    //slicemasters
}